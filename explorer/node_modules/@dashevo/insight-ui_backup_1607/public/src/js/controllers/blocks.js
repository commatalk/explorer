'use strict';

angular.module('insight.blocks').controller('BlocksController',
  function($scope, $rootScope, $routeParams, $location, Global, Block, Blocks, BlockByHeight) {
  $scope.global = Global;
  $scope.loading = false;
  var x = [];
  //
  //   for(var i=-5; i<=6;i++){
  //     var currentDate = new Date(new Date());
  //     currentDate.setDate(currentDate.getDate() - i);
  //     var element = {
  //       date: currentDate.toString(),
  //       textDay: currentDate.getDay().toString(),
  //       numberDay: currentDate.getDate().toString()
  //     }
  //     x.push(element);
  //   }
  //
  //   $scope.data = x;

  if ($routeParams.blockHeight) {
    BlockByHeight.get({
      blockHeight: $routeParams.blockHeight
    }, function(hash) {
      $location.path('/block/' + hash.blockHash);
    }, function() {
      $rootScope.flashMessage = 'Bad Request';
      $location.path('/');
    });
  }
  
  var toUTCDate = function(date){
    var _utc = new Date(date.getUTCFullYear(), date.getUTCMonth(), date.getUTCDate(),  date.getUTCHours(), date.getUTCMinutes(), date.getUTCSeconds());
    return _utc;
  };

  var millisToUTCDate = function(millis){
    return toUTCDate(new Date(millis* 1000));
  };

  $scope.toUTCDate = toUTCDate;
  $scope.millisToUTCDate = millisToUTCDate;

  //Datepicker
  var _formatTimestamp = function (date) {
    var yyyy = date.getUTCFullYear().toString();
    var mm = (date.getUTCMonth() + 1).toString(); // getMonth() is zero-based
    var dd  = date.getUTCDate().toString();

    return yyyy + '-' + (mm[1] ? mm : '0' + mm[0]) + '-' + (dd[1] ? dd : '0' + dd[0]); //padding
  };

  $scope.$watch('dt', function(newValue, oldValue) {
    if (newValue !== oldValue) {
      $location.path('/blocks-date/' + _formatTimestamp(newValue));
    }
  });

  $scope.openCalendar = function($event) {
    $scope.opened = true;
    setTimeout(function(){ angular.element(document.querySelector('.uib-datepicker-popup'))[0].style.display = "block"; }, 100);
  };

  $scope.humanSince = function(time) {
    var m = moment.unix(time).startOf('day');
    var b = moment().startOf('day');
    return m.max().from(b);
  };


  $scope.list = function() {
    $scope.loading = true;

    if ($routeParams.blockDate) {
      $scope.detail = 'On ' + $routeParams.blockDate;
    }

    if ($routeParams.startTimestamp) {
      var d=new Date($routeParams.startTimestamp*1000);
      var m=d.getMinutes();
      if (m<10) m = '0' + m;
      $scope.before = ' before ' + d.getHours() + ':' + m;
    }

    $rootScope.titleDetail = $scope.detail;

    Blocks.get({
      blockDate: $routeParams.blockDate,
      startTimestamp: $routeParams.startTimestamp
    }, function(res) {
      $scope.loading = false;
      $scope.blocks = res.blocks;
      $scope.pagination = res.pagination;

      $scope.pagination.olderBlocks = $scope.pagination.moreTs;
      for (var key in $scope.blocks) {
        if($scope.blocks[key].time < $scope.pagination.olderBlocks){
          $scope.pagination.olderBlocks = $scope.blocks[key].time;
        }
		  }
    });
  };

  $scope.findOne = function() {
    $scope.loading = true;

    Block.get({
      blockHash: $routeParams.blockHash
    }, function(block) {
      $rootScope.titleDetail = block.height;
      $rootScope.flashMessage = null;
      $scope.loading = false;
      $scope.block = block;
      // $scope.block.hash = $routeParams.blockHash;
    }, function(e) {
      if (e.status === 400) {
        $rootScope.flashMessage = 'Invalid Transaction ID: ' + $routeParams.txId;
      }
      else if (e.status === 503) {
        $rootScope.flashMessage = 'Backend Error. ' + e.data;
      }
      else {
        $rootScope.flashMessage = 'Block Not Found';
      }
      $location.path('/');
    });
  };

  $scope.params = $routeParams;

  var baseDate;

  if( $routeParams.blockDate == null ){
    baseDate = new Date();
  } else {
    baseDate = $routeParams.blockDate;
  }
  for(var i=-5; i<=5;i++){
    var currentDate = new Date(baseDate);
    currentDate.setDate(currentDate.getDate() + i);

    var td = currentDate;
    var dd = td.getDate();
    var mm = td.getMonth() + 1;
    var yyyy = td.getFullYear();

    var tmonthPre, tmonthNext;
    if(mm - 1 > 0){
      if(mm-1 < 10){
        tmonthPre = yyyy + '-0' + (mm-1);
      } else {
        tmonthPre = yyyy + '-' + (mm-1);
      }
    } else {
      tmonthPre = (yyyy-1) + '-12';
    }

    var lasterDatePre = new Date(yyyy, (mm-1),0);
    var datePre = lasterDatePre.getDate() > dd ? dd : lasterDatePre.getDate()
    if(datePre < 10){
      tmonthPre = tmonthPre + '-0' + datePre;
    } else {
      tmonthPre = tmonthPre + '-' + datePre;
    }

    if(mm == 12){
      tmonthNext = (yyyy+1) + '-01';
    } else {
      if(mm+1<10){
        tmonthNext = yyyy + '-0' + (mm+1);
      } else {
        tmonthNext = yyyy + '-' + (mm+1);
      }
    }

    var lasterDateNext = new Date(yyyy, (mm+1),0);
    var dateNext = lasterDateNext.getDate() > dd ? dd : lasterDateNext.getDate()
    if(datePre < 10){
      tmonthNext = tmonthNext + '-0' + dateNext;
    } else {
      tmonthNext = tmonthNext + '-' + dateNext;
    }

    if (dd < 10) {
      dd = '0' + dd;
    }
    if (mm < 10) {
      mm = '0' + mm;
    }

    var td = yyyy + '-' + mm + '-' + dd ;
    var tmonth = yyyy + '-' + mm;
    var textDay = '';
    var textColor = '#67676767';

    switch (currentDate.getDay()) {
      case 0:
        textDay = 'SUN';
        textColor = '#cd1c1c';
        break;
      case 1:
        textDay = 'MON';
        break;
      case 2:
        textDay = 'TUE';
        break;
      case 3:
        textDay = 'WED';
        break;
      case 4:
        textDay = 'THU';
        break;
      case 5:
        textDay = 'FRI';
        break;
      default:
        textDay = 'SAT';
        textColor = '#3897c3';
    }



    var element = {
      date: td,
      tmonth: tmonth,
      tmonthPre: tmonthPre,
      tmonthNext: tmonthNext,
      textDay: textDay,
      numberDay: currentDate.getDate().toString(),
      textColor: textColor
    };
    x.push(element);
  }

  $scope.data = x;
});


